// Code generated by sqlc. DO NOT EDIT.
// source: brand.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createBrand = `-- name: CreateBrand :one
insert into brands (id,
                    created_at,
                    updated_at,
                    deleted_at,
                    name,
                    page_title,
                    meta_keywords,
                    meta_description,
                    search_keywords,
                    custom_url)

values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)

on conflict (id) do update set updated_at       = now(),
                               name             = $5,
                               page_title       = $6,
                               meta_keywords    = $7,
                               meta_description = $8,
                               search_keywords  = $9,
                               custom_url       = $10
returning id, created_at, updated_at, deleted_at, name, page_title, meta_keywords, meta_description, search_keywords, custom_url
`

type CreateBrandParams struct {
	ID              int64           `json:"id"`
	CreatedAt       time.Time       `json:"created_at"`
	UpdatedAt       time.Time       `json:"updated_at"`
	DeletedAt       sql.NullTime    `json:"deleted_at"`
	Name            string          `json:"name"`
	PageTitle       string          `json:"page_title"`
	MetaKeywords    []string        `json:"meta_keywords"`
	MetaDescription string          `json:"meta_description"`
	SearchKeywords  string          `json:"search_keywords"`
	CustomUrl       json.RawMessage `json:"custom_url"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Name,
		arg.PageTitle,
		pq.Array(arg.MetaKeywords),
		arg.MetaDescription,
		arg.SearchKeywords,
		arg.CustomUrl,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.PageTitle,
		pq.Array(&i.MetaKeywords),
		&i.MetaDescription,
		&i.SearchKeywords,
		&i.CustomUrl,
	)
	return i, err
}

const listBrands = `-- name: ListBrands :many
select id, created_at, updated_at, deleted_at, name, page_title, meta_keywords, meta_description, search_keywords, custom_url
from brands
`

func (q *Queries) ListBrands(ctx context.Context) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, listBrands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brand
	for rows.Next() {
		var i Brand
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.PageTitle,
			pq.Array(&i.MetaKeywords),
			&i.MetaDescription,
			&i.SearchKeywords,
			&i.CustomUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
insert into products (id,
                      created_at,
                      updated_at,
                      deleted_at,
                      name,
                      type,
                      sku,
                      description,
                      weight,
                      Depth,
                      Height,
                      Price,
                      CostPrice,
                      RetailPrice,
                      SalePrice,
                      MapPrice,
                      tax_class_id,
                      product_tax_code,
                      calculated_price,
                      categories,
                      brand_id,
                      option_set_id,
                      option_set_display,
                      inventory_level,
                      inventory_warning_level,
                      inventory_tracking,
                      reviews_rating_sum,
                      reviews_count,
                      total_sold,
                      fixed_cost_shipping_price,
                      is_free_shipping,
                      is_visible,
                      is_featured,
                      warranty,
                      bin_picking_number,
                      layout_file,
                      upc,
                      mpn,
                      gtin,
                      search_keywords,
                      availability,
                      availability_description,
                      gift_wrapping_options_type,
                      sort_order,
                      condition,
                      is_condition_shown,
                      order_quantity_minimum,
                      order_quantity_maximum,
                      page_title,
                      meta_description,
                      date_created,
                      date_modified,
                      view_count,
                      preorder_release_date,
                      preorder_message,
                      is_preorder_only,
                      is_price_hidden,
                      price_hidden_label,
                      base_variant_id,
                      custom_url,
                      images,
                      variants)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24,
        $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46,
        $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62)

on conflict (id) do update set updated_at                 = now(),
                               name                       = $5,
                               type                       = $6,
                               sku                        = $7,
                               description                = $8,
                               weight                     = $9,
                               Depth                      = $10,
                               Height                     = $11,
                               Price                      = $12,
                               CostPrice                  = $13,
                               RetailPrice                = $14,
                               SalePrice                  = $15,
                               MapPrice                   = $16,
                               tax_class_id               = $17,
                               product_tax_code           = $18,
                               calculated_price           = $19,
                               categories                 = $20,
                               brand_id                   = $21,
                               option_set_id              = $22,
                               option_set_display         = $23,
                               inventory_level            = $24,
                               inventory_warning_level    = $25,
                               inventory_tracking         = $26,
                               reviews_rating_sum         = $27,
                               reviews_count              = $28,
                               total_sold                 = $29,
                               fixed_cost_shipping_price  = $30,
                               is_free_shipping           = $31,
                               is_visible                 = $32,
                               is_featured                = $33,
                               warranty                   = $34,
                               bin_picking_number         = $35,
                               layout_file                = $36,
                               upc                        = $37,
                               mpn                        = $38,
                               gtin                       = $39,
                               search_keywords            = $40,
                               availability               = $41,
                               availability_description   = $42,
                               gift_wrapping_options_type = $43,
                               sort_order                 = $44,
                               condition                  = $45,
                               is_condition_shown         = $46,
                               order_quantity_minimum     = $47,
                               order_quantity_maximum     = $48,
                               page_title                 = $49,
                               meta_description           = $50,
                               date_created               = $51,
                               date_modified              = $52,
                               view_count                 = $53,
                               preorder_release_date      = $54,
                               preorder_message           = $55,
                               is_preorder_only           = $56,
                               is_price_hidden            = $57,
                               price_hidden_label         = $58,
                               base_variant_id            = $59,
                               custom_url                 = $60,
                               images                     = $61,
                               variants                   = $62
returning id, created_at, updated_at, deleted_at, name, type, sku, description, weight, depth, height, price, costprice, retailprice, saleprice, mapprice, tax_class_id, product_tax_code, calculated_price, categories, brand_id, option_set_id, option_set_display, inventory_level, inventory_warning_level, inventory_tracking, reviews_rating_sum, reviews_count, total_sold, fixed_cost_shipping_price, is_free_shipping, is_visible, is_featured, warranty, bin_picking_number, layout_file, upc, mpn, gtin, search_keywords, availability, availability_description, gift_wrapping_options_type, sort_order, condition, is_condition_shown, order_quantity_minimum, order_quantity_maximum, page_title, meta_description, date_created, date_modified, view_count, preorder_release_date, preorder_message, is_preorder_only, is_price_hidden, price_hidden_label, base_variant_id, custom_url, images, variants
`

type CreateProductParams struct {
	ID                      int64           `json:"id"`
	CreatedAt               time.Time       `json:"created_at"`
	UpdatedAt               time.Time       `json:"updated_at"`
	DeletedAt               sql.NullTime    `json:"deleted_at"`
	Name                    string          `json:"name"`
	Type                    string          `json:"type"`
	Sku                     string          `json:"sku"`
	Description             string          `json:"description"`
	Weight                  float64         `json:"weight"`
	Depth                   float64         `json:"depth"`
	Height                  float64         `json:"height"`
	Price                   float64         `json:"price"`
	Costprice               float64         `json:"costprice"`
	Retailprice             float64         `json:"retailprice"`
	Saleprice               float64         `json:"saleprice"`
	Mapprice                float64         `json:"mapprice"`
	TaxClassID              int64           `json:"tax_class_id"`
	ProductTaxCode          string          `json:"product_tax_code"`
	CalculatedPrice         float64         `json:"calculated_price"`
	Categories              []int64         `json:"categories"`
	BrandID                 int64           `json:"brand_id"`
	OptionSetID             int64           `json:"option_set_id"`
	OptionSetDisplay        string          `json:"option_set_display"`
	InventoryLevel          int64           `json:"inventory_level"`
	InventoryWarningLevel   int64           `json:"inventory_warning_level"`
	InventoryTracking       string          `json:"inventory_tracking"`
	ReviewsRatingSum        int64           `json:"reviews_rating_sum"`
	ReviewsCount            int64           `json:"reviews_count"`
	TotalSold               int64           `json:"total_sold"`
	FixedCostShippingPrice  float64         `json:"fixed_cost_shipping_price"`
	IsFreeShipping          bool            `json:"is_free_shipping"`
	IsVisible               bool            `json:"is_visible"`
	IsFeatured              bool            `json:"is_featured"`
	Warranty                string          `json:"warranty"`
	BinPickingNumber        string          `json:"bin_picking_number"`
	LayoutFile              string          `json:"layout_file"`
	Upc                     string          `json:"upc"`
	Mpn                     string          `json:"mpn"`
	Gtin                    string          `json:"gtin"`
	SearchKeywords          string          `json:"search_keywords"`
	Availability            string          `json:"availability"`
	AvailabilityDescription string          `json:"availability_description"`
	GiftWrappingOptionsType string          `json:"gift_wrapping_options_type"`
	SortOrder               int64           `json:"sort_order"`
	Condition               string          `json:"condition"`
	IsConditionShown        bool            `json:"is_condition_shown"`
	OrderQuantityMinimum    int64           `json:"order_quantity_minimum"`
	OrderQuantityMaximum    int64           `json:"order_quantity_maximum"`
	PageTitle               string          `json:"page_title"`
	MetaDescription         string          `json:"meta_description"`
	DateCreated             string          `json:"date_created"`
	DateModified            string          `json:"date_modified"`
	ViewCount               int64           `json:"view_count"`
	PreorderReleaseDate     string          `json:"preorder_release_date"`
	PreorderMessage         string          `json:"preorder_message"`
	IsPreorderOnly          bool            `json:"is_preorder_only"`
	IsPriceHidden           bool            `json:"is_price_hidden"`
	PriceHiddenLabel        string          `json:"price_hidden_label"`
	BaseVariantID           int64           `json:"base_variant_id"`
	CustomUrl               json.RawMessage `json:"custom_url"`
	Images                  json.RawMessage `json:"images"`
	Variants                json.RawMessage `json:"variants"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Name,
		arg.Type,
		arg.Sku,
		arg.Description,
		arg.Weight,
		arg.Depth,
		arg.Height,
		arg.Price,
		arg.Costprice,
		arg.Retailprice,
		arg.Saleprice,
		arg.Mapprice,
		arg.TaxClassID,
		arg.ProductTaxCode,
		arg.CalculatedPrice,
		pq.Array(arg.Categories),
		arg.BrandID,
		arg.OptionSetID,
		arg.OptionSetDisplay,
		arg.InventoryLevel,
		arg.InventoryWarningLevel,
		arg.InventoryTracking,
		arg.ReviewsRatingSum,
		arg.ReviewsCount,
		arg.TotalSold,
		arg.FixedCostShippingPrice,
		arg.IsFreeShipping,
		arg.IsVisible,
		arg.IsFeatured,
		arg.Warranty,
		arg.BinPickingNumber,
		arg.LayoutFile,
		arg.Upc,
		arg.Mpn,
		arg.Gtin,
		arg.SearchKeywords,
		arg.Availability,
		arg.AvailabilityDescription,
		arg.GiftWrappingOptionsType,
		arg.SortOrder,
		arg.Condition,
		arg.IsConditionShown,
		arg.OrderQuantityMinimum,
		arg.OrderQuantityMaximum,
		arg.PageTitle,
		arg.MetaDescription,
		arg.DateCreated,
		arg.DateModified,
		arg.ViewCount,
		arg.PreorderReleaseDate,
		arg.PreorderMessage,
		arg.IsPreorderOnly,
		arg.IsPriceHidden,
		arg.PriceHiddenLabel,
		arg.BaseVariantID,
		arg.CustomUrl,
		arg.Images,
		arg.Variants,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Type,
		&i.Sku,
		&i.Description,
		&i.Weight,
		&i.Depth,
		&i.Height,
		&i.Price,
		&i.Costprice,
		&i.Retailprice,
		&i.Saleprice,
		&i.Mapprice,
		&i.TaxClassID,
		&i.ProductTaxCode,
		&i.CalculatedPrice,
		pq.Array(&i.Categories),
		&i.BrandID,
		&i.OptionSetID,
		&i.OptionSetDisplay,
		&i.InventoryLevel,
		&i.InventoryWarningLevel,
		&i.InventoryTracking,
		&i.ReviewsRatingSum,
		&i.ReviewsCount,
		&i.TotalSold,
		&i.FixedCostShippingPrice,
		&i.IsFreeShipping,
		&i.IsVisible,
		&i.IsFeatured,
		&i.Warranty,
		&i.BinPickingNumber,
		&i.LayoutFile,
		&i.Upc,
		&i.Mpn,
		&i.Gtin,
		&i.SearchKeywords,
		&i.Availability,
		&i.AvailabilityDescription,
		&i.GiftWrappingOptionsType,
		&i.SortOrder,
		&i.Condition,
		&i.IsConditionShown,
		&i.OrderQuantityMinimum,
		&i.OrderQuantityMaximum,
		&i.PageTitle,
		&i.MetaDescription,
		&i.DateCreated,
		&i.DateModified,
		&i.ViewCount,
		&i.PreorderReleaseDate,
		&i.PreorderMessage,
		&i.IsPreorderOnly,
		&i.IsPriceHidden,
		&i.PriceHiddenLabel,
		&i.BaseVariantID,
		&i.CustomUrl,
		&i.Images,
		&i.Variants,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
delete
from
    products
where
    id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
select
    products.id, products.created_at, products.updated_at, products.deleted_at, products.name, products.type, products.sku, products.description, products.weight, products.depth, products.height, products.price, products.costprice, products.retailprice, products.saleprice, products.mapprice, products.tax_class_id, products.product_tax_code, products.calculated_price, products.categories, products.brand_id, products.option_set_id, products.option_set_display, products.inventory_level, products.inventory_warning_level, products.inventory_tracking, products.reviews_rating_sum, products.reviews_count, products.total_sold, products.fixed_cost_shipping_price, products.is_free_shipping, products.is_visible, products.is_featured, products.warranty, products.bin_picking_number, products.layout_file, products.upc, products.mpn, products.gtin, products.search_keywords, products.availability, products.availability_description, products.gift_wrapping_options_type, products.sort_order, products.condition, products.is_condition_shown, products.order_quantity_minimum, products.order_quantity_maximum, products.page_title, products.meta_description, products.date_created, products.date_modified, products.view_count, products.preorder_release_date, products.preorder_message, products.is_preorder_only, products.is_price_hidden, products.price_hidden_label, products.base_variant_id, products.custom_url, products.images, products.variants,
    brands.name as brand_name
from
    products
    inner join brands on products.brand_id = brands.id
where
    products.id = $1
`

type GetProductRow struct {
	ID                      int64           `json:"id"`
	CreatedAt               time.Time       `json:"created_at"`
	UpdatedAt               time.Time       `json:"updated_at"`
	DeletedAt               sql.NullTime    `json:"deleted_at"`
	Name                    string          `json:"name"`
	Type                    string          `json:"type"`
	Sku                     string          `json:"sku"`
	Description             string          `json:"description"`
	Weight                  float64         `json:"weight"`
	Depth                   float64         `json:"depth"`
	Height                  float64         `json:"height"`
	Price                   float64         `json:"price"`
	Costprice               float64         `json:"costprice"`
	Retailprice             float64         `json:"retailprice"`
	Saleprice               float64         `json:"saleprice"`
	Mapprice                float64         `json:"mapprice"`
	TaxClassID              int64           `json:"tax_class_id"`
	ProductTaxCode          string          `json:"product_tax_code"`
	CalculatedPrice         float64         `json:"calculated_price"`
	Categories              []int64         `json:"categories"`
	BrandID                 int64           `json:"brand_id"`
	OptionSetID             int64           `json:"option_set_id"`
	OptionSetDisplay        string          `json:"option_set_display"`
	InventoryLevel          int64           `json:"inventory_level"`
	InventoryWarningLevel   int64           `json:"inventory_warning_level"`
	InventoryTracking       string          `json:"inventory_tracking"`
	ReviewsRatingSum        int64           `json:"reviews_rating_sum"`
	ReviewsCount            int64           `json:"reviews_count"`
	TotalSold               int64           `json:"total_sold"`
	FixedCostShippingPrice  float64         `json:"fixed_cost_shipping_price"`
	IsFreeShipping          bool            `json:"is_free_shipping"`
	IsVisible               bool            `json:"is_visible"`
	IsFeatured              bool            `json:"is_featured"`
	Warranty                string          `json:"warranty"`
	BinPickingNumber        string          `json:"bin_picking_number"`
	LayoutFile              string          `json:"layout_file"`
	Upc                     string          `json:"upc"`
	Mpn                     string          `json:"mpn"`
	Gtin                    string          `json:"gtin"`
	SearchKeywords          string          `json:"search_keywords"`
	Availability            string          `json:"availability"`
	AvailabilityDescription string          `json:"availability_description"`
	GiftWrappingOptionsType string          `json:"gift_wrapping_options_type"`
	SortOrder               int64           `json:"sort_order"`
	Condition               string          `json:"condition"`
	IsConditionShown        bool            `json:"is_condition_shown"`
	OrderQuantityMinimum    int64           `json:"order_quantity_minimum"`
	OrderQuantityMaximum    int64           `json:"order_quantity_maximum"`
	PageTitle               string          `json:"page_title"`
	MetaDescription         string          `json:"meta_description"`
	DateCreated             string          `json:"date_created"`
	DateModified            string          `json:"date_modified"`
	ViewCount               int64           `json:"view_count"`
	PreorderReleaseDate     string          `json:"preorder_release_date"`
	PreorderMessage         string          `json:"preorder_message"`
	IsPreorderOnly          bool            `json:"is_preorder_only"`
	IsPriceHidden           bool            `json:"is_price_hidden"`
	PriceHiddenLabel        string          `json:"price_hidden_label"`
	BaseVariantID           int64           `json:"base_variant_id"`
	CustomUrl               json.RawMessage `json:"custom_url"`
	Images                  json.RawMessage `json:"images"`
	Variants                json.RawMessage `json:"variants"`
	BrandName               string          `json:"brand_name"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Type,
		&i.Sku,
		&i.Description,
		&i.Weight,
		&i.Depth,
		&i.Height,
		&i.Price,
		&i.Costprice,
		&i.Retailprice,
		&i.Saleprice,
		&i.Mapprice,
		&i.TaxClassID,
		&i.ProductTaxCode,
		&i.CalculatedPrice,
		pq.Array(&i.Categories),
		&i.BrandID,
		&i.OptionSetID,
		&i.OptionSetDisplay,
		&i.InventoryLevel,
		&i.InventoryWarningLevel,
		&i.InventoryTracking,
		&i.ReviewsRatingSum,
		&i.ReviewsCount,
		&i.TotalSold,
		&i.FixedCostShippingPrice,
		&i.IsFreeShipping,
		&i.IsVisible,
		&i.IsFeatured,
		&i.Warranty,
		&i.BinPickingNumber,
		&i.LayoutFile,
		&i.Upc,
		&i.Mpn,
		&i.Gtin,
		&i.SearchKeywords,
		&i.Availability,
		&i.AvailabilityDescription,
		&i.GiftWrappingOptionsType,
		&i.SortOrder,
		&i.Condition,
		&i.IsConditionShown,
		&i.OrderQuantityMinimum,
		&i.OrderQuantityMaximum,
		&i.PageTitle,
		&i.MetaDescription,
		&i.DateCreated,
		&i.DateModified,
		&i.ViewCount,
		&i.PreorderReleaseDate,
		&i.PreorderMessage,
		&i.IsPreorderOnly,
		&i.IsPriceHidden,
		&i.PriceHiddenLabel,
		&i.BaseVariantID,
		&i.CustomUrl,
		&i.Images,
		&i.Variants,
		&i.BrandName,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
select
    products.id, products.created_at, products.updated_at, products.deleted_at, products.name, products.type, products.sku, products.description, products.weight, products.depth, products.height, products.price, products.costprice, products.retailprice, products.saleprice, products.mapprice, products.tax_class_id, products.product_tax_code, products.calculated_price, products.categories, products.brand_id, products.option_set_id, products.option_set_display, products.inventory_level, products.inventory_warning_level, products.inventory_tracking, products.reviews_rating_sum, products.reviews_count, products.total_sold, products.fixed_cost_shipping_price, products.is_free_shipping, products.is_visible, products.is_featured, products.warranty, products.bin_picking_number, products.layout_file, products.upc, products.mpn, products.gtin, products.search_keywords, products.availability, products.availability_description, products.gift_wrapping_options_type, products.sort_order, products.condition, products.is_condition_shown, products.order_quantity_minimum, products.order_quantity_maximum, products.page_title, products.meta_description, products.date_created, products.date_modified, products.view_count, products.preorder_release_date, products.preorder_message, products.is_preorder_only, products.is_price_hidden, products.price_hidden_label, products.base_variant_id, products.custom_url, products.images, products.variants,
    brands.name as brand_name
from
    products
    inner join brands on products.brand_id = brands.id
where
    ($1::bigint = any (categories) or
    $2::bigint = any (categories) or
    $3::bigint = any (categories)) and
    (products.price between $4::bigint and $5::bigint) and
    products.is_visible
order by
    (case when products.is_featured then 1 end) asc, products.id
limit $7::bigint offset $6::bigint
`

type ListProductsParams struct {
	Cat1     int64 `json:"cat1"`
	Cat2     int64 `json:"cat2"`
	Cat3     int64 `json:"cat3"`
	Minprice int64 `json:"minprice"`
	Maxprice int64 `json:"maxprice"`
	Off      int64 `json:"off"`
	Lim      int64 `json:"lim"`
}

type ListProductsRow struct {
	ID                      int64           `json:"id"`
	CreatedAt               time.Time       `json:"created_at"`
	UpdatedAt               time.Time       `json:"updated_at"`
	DeletedAt               sql.NullTime    `json:"deleted_at"`
	Name                    string          `json:"name"`
	Type                    string          `json:"type"`
	Sku                     string          `json:"sku"`
	Description             string          `json:"description"`
	Weight                  float64         `json:"weight"`
	Depth                   float64         `json:"depth"`
	Height                  float64         `json:"height"`
	Price                   float64         `json:"price"`
	Costprice               float64         `json:"costprice"`
	Retailprice             float64         `json:"retailprice"`
	Saleprice               float64         `json:"saleprice"`
	Mapprice                float64         `json:"mapprice"`
	TaxClassID              int64           `json:"tax_class_id"`
	ProductTaxCode          string          `json:"product_tax_code"`
	CalculatedPrice         float64         `json:"calculated_price"`
	Categories              []int64         `json:"categories"`
	BrandID                 int64           `json:"brand_id"`
	OptionSetID             int64           `json:"option_set_id"`
	OptionSetDisplay        string          `json:"option_set_display"`
	InventoryLevel          int64           `json:"inventory_level"`
	InventoryWarningLevel   int64           `json:"inventory_warning_level"`
	InventoryTracking       string          `json:"inventory_tracking"`
	ReviewsRatingSum        int64           `json:"reviews_rating_sum"`
	ReviewsCount            int64           `json:"reviews_count"`
	TotalSold               int64           `json:"total_sold"`
	FixedCostShippingPrice  float64         `json:"fixed_cost_shipping_price"`
	IsFreeShipping          bool            `json:"is_free_shipping"`
	IsVisible               bool            `json:"is_visible"`
	IsFeatured              bool            `json:"is_featured"`
	Warranty                string          `json:"warranty"`
	BinPickingNumber        string          `json:"bin_picking_number"`
	LayoutFile              string          `json:"layout_file"`
	Upc                     string          `json:"upc"`
	Mpn                     string          `json:"mpn"`
	Gtin                    string          `json:"gtin"`
	SearchKeywords          string          `json:"search_keywords"`
	Availability            string          `json:"availability"`
	AvailabilityDescription string          `json:"availability_description"`
	GiftWrappingOptionsType string          `json:"gift_wrapping_options_type"`
	SortOrder               int64           `json:"sort_order"`
	Condition               string          `json:"condition"`
	IsConditionShown        bool            `json:"is_condition_shown"`
	OrderQuantityMinimum    int64           `json:"order_quantity_minimum"`
	OrderQuantityMaximum    int64           `json:"order_quantity_maximum"`
	PageTitle               string          `json:"page_title"`
	MetaDescription         string          `json:"meta_description"`
	DateCreated             string          `json:"date_created"`
	DateModified            string          `json:"date_modified"`
	ViewCount               int64           `json:"view_count"`
	PreorderReleaseDate     string          `json:"preorder_release_date"`
	PreorderMessage         string          `json:"preorder_message"`
	IsPreorderOnly          bool            `json:"is_preorder_only"`
	IsPriceHidden           bool            `json:"is_price_hidden"`
	PriceHiddenLabel        string          `json:"price_hidden_label"`
	BaseVariantID           int64           `json:"base_variant_id"`
	CustomUrl               json.RawMessage `json:"custom_url"`
	Images                  json.RawMessage `json:"images"`
	Variants                json.RawMessage `json:"variants"`
	BrandName               string          `json:"brand_name"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ListProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, listProducts,
		arg.Cat1,
		arg.Cat2,
		arg.Cat3,
		arg.Minprice,
		arg.Maxprice,
		arg.Off,
		arg.Lim,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Type,
			&i.Sku,
			&i.Description,
			&i.Weight,
			&i.Depth,
			&i.Height,
			&i.Price,
			&i.Costprice,
			&i.Retailprice,
			&i.Saleprice,
			&i.Mapprice,
			&i.TaxClassID,
			&i.ProductTaxCode,
			&i.CalculatedPrice,
			pq.Array(&i.Categories),
			&i.BrandID,
			&i.OptionSetID,
			&i.OptionSetDisplay,
			&i.InventoryLevel,
			&i.InventoryWarningLevel,
			&i.InventoryTracking,
			&i.ReviewsRatingSum,
			&i.ReviewsCount,
			&i.TotalSold,
			&i.FixedCostShippingPrice,
			&i.IsFreeShipping,
			&i.IsVisible,
			&i.IsFeatured,
			&i.Warranty,
			&i.BinPickingNumber,
			&i.LayoutFile,
			&i.Upc,
			&i.Mpn,
			&i.Gtin,
			&i.SearchKeywords,
			&i.Availability,
			&i.AvailabilityDescription,
			&i.GiftWrappingOptionsType,
			&i.SortOrder,
			&i.Condition,
			&i.IsConditionShown,
			&i.OrderQuantityMinimum,
			&i.OrderQuantityMaximum,
			&i.PageTitle,
			&i.MetaDescription,
			&i.DateCreated,
			&i.DateModified,
			&i.ViewCount,
			&i.PreorderReleaseDate,
			&i.PreorderMessage,
			&i.IsPreorderOnly,
			&i.IsPriceHidden,
			&i.PriceHiddenLabel,
			&i.BaseVariantID,
			&i.CustomUrl,
			&i.Images,
			&i.Variants,
			&i.BrandName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productCount = `-- name: ProductCount :one
select
    count(*)::bigint as featured_total,
    (select count(*) from products inner join brands on products.brand_id = brands.id where products.is_visible)::bigint as products_total
from
    products inner join brands on products.brand_id = brands.id
where
    ($1::bigint = any (categories) or
    $2::bigint = any (categories) or
    $3::bigint = any (categories)) and
    (products.price between $4::bigint and $5::bigint) and
    products.is_visible
`

type ProductCountParams struct {
	Cat1     int64 `json:"cat1"`
	Cat2     int64 `json:"cat2"`
	Cat3     int64 `json:"cat3"`
	Minprice int64 `json:"minprice"`
	Maxprice int64 `json:"maxprice"`
}

type ProductCountRow struct {
	FeaturedTotal int64 `json:"featured_total"`
	ProductsTotal int64 `json:"products_total"`
}

func (q *Queries) ProductCount(ctx context.Context, arg ProductCountParams) (ProductCountRow, error) {
	row := q.db.QueryRowContext(ctx, productCount,
		arg.Cat1,
		arg.Cat2,
		arg.Cat3,
		arg.Minprice,
		arg.Maxprice,
	)
	var i ProductCountRow
	err := row.Scan(&i.FeaturedTotal, &i.ProductsTotal)
	return i, err
}

const updateInventoryLevel = `-- name: UpdateInventoryLevel :exec
update
    products
set
    inventory_level = $2
where
    id = $1
`

type UpdateInventoryLevelParams struct {
	ID             int64 `json:"id"`
	InventoryLevel int64 `json:"inventory_level"`
}

func (q *Queries) UpdateInventoryLevel(ctx context.Context, arg UpdateInventoryLevelParams) error {
	_, err := q.db.ExecContext(ctx, updateInventoryLevel, arg.ID, arg.InventoryLevel)
	return err
}
